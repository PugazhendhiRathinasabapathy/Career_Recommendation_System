{"ast":null,"code":"var _jsxFileName = \"/Users/pugazhendhi/MachineLearning/Career_Recommendation_System/frontend/my-app/src/Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport './Questions.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Questions = () => {\n  _s();\n  const navigate = useNavigate(); // Hook for navigation\n  const [question, setQuestion] = useState('');\n  const [options, setOptions] = useState([]);\n  const [selectedOption, setSelectedOption] = useState('');\n  const [step, setStep] = useState(1); // Track question number\n  const [careerRecommendations, setCareerRecommendations] = useState(null);\n\n  // Fetch first question on load\n  useEffect(() => {\n    fetchQuestion();\n  }, []);\n  const fetchQuestion = async () => {\n    try {\n      const response = await axios.get(\"http://127.0.0.1:8000/get-question/\");\n      console.log(\"Full API Response:\", response.data); // Debugging\n\n      const text = response.data.question.content;\n      console.log(\"Extracted Question:\", text);\n      if (typeof text !== \"string\") {\n        throw new Error(\"Invalid response format: Expected a string\");\n      }\n\n      // Extract question and options\n      const parsedOptions = text.match(/[A-D]\\) (.+)/g) || [];\n      setQuestion(text.split(\"A)\")[0].trim()); // First part is the question\n      setOptions(parsedOptions);\n    } catch (error) {\n      console.error(\"Error fetching question:\", error);\n    }\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (!selectedOption) {\n      alert(\"Please select an option!\");\n      return;\n    }\n    try {\n      const response = await axios.post(\"http://127.0.0.1:8000/submit-answer/\", {\n        selected_option: selectedOption\n      });\n      if (response.data.careers) {\n        setCareerRecommendations(response.data.careers);\n        navigate('/result');\n      } else {\n        const text = response.data.question.content;\n        console.log(\"Full API Response:\", response.data);\n        if (typeof text === \"string\") {\n          setQuestion(text.split(\"A)\")[0].trim());\n          setOptions(text.match(/[A-D]\\) (.+)/g) || []);\n        } else {\n          console.error(\"Invalid question format received:\", text);\n        }\n        setSelectedOption('');\n        setStep(step + 1);\n      }\n    } catch (error) {\n      console.error(\"Error submitting answer:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"Career Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"subtitle\",\n        children: [\"Answer \", 20 - step + 1, \" more questions to get your career recommendations!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), careerRecommendations ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"results\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83C\\uDFAF Recommended Careers:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: careerRecommendations.map((career, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: career\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"question-form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this), options.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"option\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          id: `option${index}`,\n          name: \"careerOption\",\n          value: option,\n          checked: selectedOption === option,\n          onChange: e => setSelectedOption(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: `option${index}`,\n          children: option\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 25\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit-button\",\n        type: \"submit\",\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n_s(Questions, \"3sJUySrjrxZH0v83lbjhtNgv1TA=\", false, function () {\n  return [useNavigate];\n});\n_c = Questions;\nexport default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","axios","jsxDEV","_jsxDEV","Questions","_s","navigate","question","setQuestion","options","setOptions","selectedOption","setSelectedOption","step","setStep","careerRecommendations","setCareerRecommendations","fetchQuestion","response","get","console","log","data","text","content","Error","parsedOptions","match","split","trim","error","handleSubmit","event","preventDefault","alert","post","selected_option","careers","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","career","index","onSubmit","option","type","id","name","value","checked","onChange","e","target","htmlFor","_c","$RefreshReg$"],"sources":["/Users/pugazhendhi/MachineLearning/Career_Recommendation_System/frontend/my-app/src/Questions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom'; \nimport axios from 'axios';\nimport './Questions.css';\n\nconst Questions = () => {\n    const navigate = useNavigate();  // Hook for navigation\n    const [question, setQuestion] = useState('');\n    const [options, setOptions] = useState([]);\n    const [selectedOption, setSelectedOption] = useState('');\n    const [step, setStep] = useState(1); // Track question number\n    const [careerRecommendations, setCareerRecommendations] = useState(null);\n\n    // Fetch first question on load\n    useEffect(() => {\n        fetchQuestion();\n    }, []);\n\n    const fetchQuestion = async () => {\n      try {\n          const response = await axios.get(\"http://127.0.0.1:8000/get-question/\");\n          console.log(\"Full API Response:\", response.data); // Debugging\n  \n          const text = response.data.question.content;\n          console.log(\"Extracted Question:\", text);\n  \n          if (typeof text !== \"string\") {\n              throw new Error(\"Invalid response format: Expected a string\");\n          }\n  \n          // Extract question and options\n          const parsedOptions = text.match(/[A-D]\\) (.+)/g) || [];\n          setQuestion(text.split(\"A)\")[0].trim()); // First part is the question\n          setOptions(parsedOptions);\n      } catch (error) {\n          console.error(\"Error fetching question:\", error);\n      }\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!selectedOption) {\n        alert(\"Please select an option!\");\n        return;\n    }\n\n    try {\n        const response = await axios.post(\"http://127.0.0.1:8000/submit-answer/\", {\n            selected_option: selectedOption\n        });\n\n        if (response.data.careers) {\n            setCareerRecommendations(response.data.careers);\n            navigate('/result');\n        } else {\n            const text = response.data.question.content;\n            console.log(\"Full API Response:\", response.data); \n            if (typeof text === \"string\") {\n                setQuestion(text.split(\"A)\")[0].trim());\n                setOptions(text.match(/[A-D]\\) (.+)/g) || []);\n            } else {\n                console.error(\"Invalid question format received:\", text);\n            }\n            setSelectedOption('');\n            setStep(step + 1);\n        }\n    } catch (error) {\n        console.error(\"Error submitting answer:\", error);\n    }\n  };\n\n    return (\n        <div className=\"questions-container\">\n            <header className=\"header\">\n                <h1 className=\"title\">Career Quiz</h1>\n                <p className=\"subtitle\">Answer {20 - step + 1} more questions to get your career recommendations!</p>\n            </header>\n\n            {careerRecommendations ? (\n                <div className=\"results\">\n                    <h2>ðŸŽ¯ Recommended Careers:</h2>\n                    <ul>\n                        {careerRecommendations.map((career, index) => (\n                            <li key={index}>{career}</li>\n                        ))}\n                    </ul>\n                </div>\n            ) : (\n                <form className=\"question-form\" onSubmit={handleSubmit}>\n                    <h2>{question}</h2>\n                    {options.map((option, index) => (\n                        <div className=\"option\" key={index}>\n                            <input\n                                type=\"radio\"\n                                id={`option${index}`}\n                                name=\"careerOption\"\n                                value={option}\n                                checked={selectedOption === option}\n                                onChange={(e) => setSelectedOption(e.target.value)}\n                            />\n                            <label htmlFor={`option${index}`}>{option}</label>\n                        </div>\n                    ))}\n                    <button className=\"submit-button\" type=\"submit\">Next</button>\n                </form>\n            )}\n        </div>\n    );\n};\n\nexport default Questions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}