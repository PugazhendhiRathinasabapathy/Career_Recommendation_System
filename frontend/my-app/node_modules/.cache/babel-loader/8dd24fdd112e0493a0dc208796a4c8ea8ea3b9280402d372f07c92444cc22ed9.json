{"ast":null,"code":"var _jsxFileName = \"/Users/pugazhendhi/MachineLearning/Career_Recommendation_System/frontend/my-app/src/Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport './Questions.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Questions = () => {\n  _s();\n  const navigate = useNavigate(); // Hook for navigation\n  const [question, setQuestion] = useState('');\n  const [options, setOptions] = useState([]);\n  const [selectedOption, setSelectedOption] = useState('');\n  const [step, setStep] = useState(1); // Track question number\n\n  // Fetch first question on load\n  useEffect(() => {\n    setStep(0);\n    fetchQuestion();\n  }, []);\n  const fetchQuestion = async () => {\n    try {\n      const response = await axios.get(\"http://127.0.0.1:8000/get-question/\");\n      console.log(\"fetchQuestion Full API Response:\", response.data); // Debugging\n\n      const text = response.data.question;\n      console.log(\"Extracted Question:\", text);\n      if (typeof text !== \"string\") {\n        throw new Error(\"Invalid response format: Expected a string\");\n      }\n\n      // Extract question and options\n      const parsedOptions = text.match(/[A-D]\\) (.+)/g) || [];\n      setQuestion(text.split(\"A)\")[0].trim()); // First part is the question\n      setOptions(parsedOptions);\n    } catch (error) {\n      console.error(\"Error fetching question:\", error);\n    }\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (!selectedOption) {\n      alert(\"Please select an option!\");\n      return;\n    }\n    try {\n      const response = await axios.post(\"http://127.0.0.1:8000/submit-answer/\", {\n        selected_option: selectedOption,\n        question: question\n      });\n      if (response.data.careers) {\n        navigate('/result', {\n          state: {\n            careers: response.data.careers\n          }\n        });\n      } else {\n        const text = response.data.question.content;\n        console.log(\"Full API Response:\", response.data);\n        if (typeof text === \"string\") {\n          setQuestion(text.split(\"A)\")[0].trim());\n          setOptions(text.match(/[A-D]\\) (.+)/g) || []);\n        } else {\n          console.error(\"Invalid question format received:\", text);\n        }\n        setSelectedOption('');\n        setStep(step + 1);\n      }\n    } catch (error) {\n      console.error(\"Error submitting answer:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \" \\uD83E\\uDD14 Career Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"subtitle\",\n        children: [\"Answer \", 19 - step + 1, \" more questions to get your career recommendations!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"question-form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), options.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"option\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          id: `option${index}`,\n          name: \"careerOption\",\n          value: option,\n          checked: selectedOption === option,\n          onChange: e => setSelectedOption(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: `option${index}`,\n          children: option\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit-button\",\n        type: \"submit\",\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n_s(Questions, \"D3ONtbv1DF6Ncm1RnCTf0WKdCE8=\", false, function () {\n  return [useNavigate];\n});\n_c = Questions;\nexport default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","axios","jsxDEV","_jsxDEV","Questions","_s","navigate","question","setQuestion","options","setOptions","selectedOption","setSelectedOption","step","setStep","fetchQuestion","response","get","console","log","data","text","Error","parsedOptions","match","split","trim","error","handleSubmit","event","preventDefault","alert","post","selected_option","careers","state","content","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","map","option","index","type","id","name","value","checked","onChange","e","target","htmlFor","_c","$RefreshReg$"],"sources":["/Users/pugazhendhi/MachineLearning/Career_Recommendation_System/frontend/my-app/src/Questions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom'; \nimport axios from 'axios';\nimport './Questions.css';\n\nconst Questions = () => {\n    const navigate = useNavigate();  // Hook for navigation\n    const [question, setQuestion] = useState('');\n    const [options, setOptions] = useState([]);\n    const [selectedOption, setSelectedOption] = useState('');\n    const [step, setStep] = useState(1); // Track question number\n\n    // Fetch first question on load\n    useEffect(() => {\n        setStep(0);\n        fetchQuestion();\n    }, []);\n\n    const fetchQuestion = async () => {\n      try {\n          const response = await axios.get(\"http://127.0.0.1:8000/get-question/\");\n          console.log(\"fetchQuestion Full API Response:\", response.data); // Debugging\n  \n          const text = response.data.question;\n          console.log(\"Extracted Question:\", text);\n  \n          if (typeof text !== \"string\") {\n              throw new Error(\"Invalid response format: Expected a string\");\n          }\n  \n          // Extract question and options\n          const parsedOptions = text.match(/[A-D]\\) (.+)/g) || [];\n          setQuestion(text.split(\"A)\")[0].trim()); // First part is the question\n          setOptions(parsedOptions);\n      } catch (error) {\n          console.error(\"Error fetching question:\", error);\n      }\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!selectedOption) {\n        alert(\"Please select an option!\");\n        return;\n    }\n\n    try {\n        const response = await axios.post(\"http://127.0.0.1:8000/submit-answer/\", {\n            selected_option: selectedOption,\n            question: question\n        });\n\n        if (response.data.careers) {\n            navigate('/result', { state: { careers: response.data.careers } });\n        } else {\n            const text = response.data.question.content;\n            console.log(\"Full API Response:\", response.data); \n            if (typeof text === \"string\") {\n                setQuestion(text.split(\"A)\")[0].trim());\n                setOptions(text.match(/[A-D]\\) (.+)/g) || []);\n            } else {\n                console.error(\"Invalid question format received:\", text);\n            }\n            setSelectedOption('');\n            setStep(step + 1);\n        }\n    } catch (error) {\n        console.error(\"Error submitting answer:\", error);\n    }\n  };\n\n    return (\n        <div className=\"questions-container\">\n            <header className=\"header\">\n                <h1 className=\"title\"> ðŸ¤” Career Quiz</h1>\n                <p className=\"subtitle\">Answer {19 - step + 1} more questions to get your career recommendations!</p>\n            </header>\n\n            <form className=\"question-form\" onSubmit={handleSubmit}>\n                <h2>{question}</h2>\n                {options.map((option, index) => (\n                    <div className=\"option\" key={index}>\n                        <input\n                            type=\"radio\"\n                            id={`option${index}`}\n                            name=\"careerOption\"\n                            value={option}\n                            checked={selectedOption === option}\n                            onChange={(e) => setSelectedOption(e.target.value)}\n                        />\n                        <label htmlFor={`option${index}`}>{option}</label>\n                    </div>\n                ))}\n                <button className=\"submit-button\" type=\"submit\">Next</button>\n            </form>\n        </div>\n    );\n};\n\nexport default Questions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}